{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is the documentation website for the LGSVL Simulator project. Visit our github here . Quick Start Getting Started Building from source Simulator controls","title":"Home"},{"location":"#home","text":"This is the documentation website for the LGSVL Simulator project. Visit our github here .","title":"Home"},{"location":"#quick-start","text":"Getting Started Building from source Simulator controls","title":"Quick Start"},{"location":"build-instructions/","text":"Instructions to build standalone executable Build steps for Ubuntu host: Install Unity 2018.2.4f1: https://beta.unity3d.com/download/fe703c5165de/public_download.html install into the /opt/Unity folder: chmod +x ~/Downloads/UnitySetup-2018.2.4f1 ./UnitySetup-2018.2.4f1 --unattended --install-location=/opt/Unity --components=Unity,Windows-Mono run Unity and make sure it's activated Make sure you have git-lfs installed before cloning this repository . Clone simulator from GitHub: git clone https://github.com/lgsvl/simulator.git Run build: mkdir build /opt/Unity/Editor/Unity \\ -batchmode \\ -nographics \\ -silent-crashes \\ -quit \\ -buildDestination ./build/simulator \\ -buildTarget Linux64 \\ -executeMethod BuildScript.Build \\ -projectPath . \\ -logFile /dev/stdout Test simulator: Run rosbridge: roslaunch rosbridge_server rosbridge_websocket.launch Run simulator from build/simulator Choose \"Free Roaming\" - \"DuckieDowntown\" as map - \"Duckiebot-duckietown-ros1\" as robot make sure it's connected, click \"RUN\" - make sure it's running, you can operate the robot Run rviz or rqt_image_view and see image from topic \"/simulator/camera_node/image/compressed\"","title":"Build instructions"},{"location":"build-instructions/#instructions-to-build-standalone-executable","text":"Build steps for Ubuntu host: Install Unity 2018.2.4f1: https://beta.unity3d.com/download/fe703c5165de/public_download.html install into the /opt/Unity folder: chmod +x ~/Downloads/UnitySetup-2018.2.4f1 ./UnitySetup-2018.2.4f1 --unattended --install-location=/opt/Unity --components=Unity,Windows-Mono run Unity and make sure it's activated Make sure you have git-lfs installed before cloning this repository . Clone simulator from GitHub: git clone https://github.com/lgsvl/simulator.git Run build: mkdir build /opt/Unity/Editor/Unity \\ -batchmode \\ -nographics \\ -silent-crashes \\ -quit \\ -buildDestination ./build/simulator \\ -buildTarget Linux64 \\ -executeMethod BuildScript.Build \\ -projectPath . \\ -logFile /dev/stdout Test simulator: Run rosbridge: roslaunch rosbridge_server rosbridge_websocket.launch Run simulator from build/simulator Choose \"Free Roaming\" - \"DuckieDowntown\" as map - \"Duckiebot-duckietown-ros1\" as robot make sure it's connected, click \"RUN\" - make sure it's running, you can operate the robot Run rviz or rqt_image_view and see image from topic \"/simulator/camera_node/image/compressed\"","title":"Instructions to build standalone executable"},{"location":"getting-started/","text":"A ROS/ROS2 Multi-robot Simulator for Autonomous Vehicles Introduction LG Silicon Valley Lab has developed a Unity-based multi-robot simulator for autonomous vehicle developers. We provide an out-of-the-box solution which can meet the needs of developers wishing to focus on testing their autonomous vehicle algorithms. It currently has integration with the Duckietown , TierIV's Autoware , and Baidu's Apollo platforms, can generate HD maps, and be immediately used for testing and validation of a whole system with little need for custom integrations. We hope to build a collaborative community among robotics and autonomous vehicle developers by open sourcing our efforts. To use the simulator with Apollo, after following the build steps for the simulator, follow the guide on our Apollo fork . To use the simulator with Autoware, build the simulator then follow the guide on our Autoware fork . Video ( Link ) Getting Started Running the simulator with reasonable performance and frame rate (for perception related tasks) requires a high performance desktop. Below is the recommended system for running the simulator at high quality. We are currently working on performance improvements for a better experience. Recommended system: 4 GHz Dual core CPU Nvidia GTX 1080 Windows 10 64 Bit The easiest way to get started with running the simulator is to open it as a project in Unity and run inside the Unity Editor. Otherwise, you can build the Unity project into a standalone executable. Currently, running the simulator in Windows yields better performance than running on Linux. Steps for starting simulator in Unity Editor Install Unity 2018.2.4. Windows link: https://unity3d.com/get-unity/download/archive Linux link (2018.2.4f1): https://beta.unity3d.com/download/fe703c5165de/public_download.html Install Git LFS (this should be as simple as git lfs install ). Since this repository contains several large files, we speed up clones/uploads with Git LFS. This is a requirement for cloning our project, and without it the repository cannot be set up properly. Clone this repository from Github: git clone https://github.com/lgsvl/simulator.git Open Unity Editor by navigating to where it is installed and launching the Unity executable. Open the simulator project that was cloned in step 3 by selecting the simulator folder. Run the simulator. On the bottom left in the Project panel, Navigate to Assets- Scenes. Then double-click \"Menu\" (with the Unity icon next to it) to load the scene. At the top of the editor, click the Play button to start the simulator. Build standalone executable If you would prefer to not run in Unity Editor and build the standalone executable yourself, follow the instructions here . Simulator Instructions After starting the simulator, you should see the main menu. Currently, only Free Roaming mode is supported. Click \"Free Roaming.\" Select the appropriate map and vehicle. For a standard setup, select \"SanFrancisco\" for map and \"XE_Rigged-apollo\" for Robot. If connecting with Autoware or Apollo, make sure simulator establishes connection with rosbridge. Click \"Run\" to begin. The program will not allow running if there is no established connection with a rosbridge. To bypass this and just test out the simulator environment, hold down the Shift button and click \"Run.\" The vehicle/robot should spawn inside the map environment that was selected. Read here for an explanation of all current keyboard shortcuts and controls. Follow the guides on our respective Autoware and Apollo repositories for instructions on running the platforms with the simulator. Guide to simulator functionality Look here for a guide to currently available functionality and keyboard shortcuts for using the simulator. Contact Please feel free to provide feedback or ask questions by creating a Github issue. For inquiries about collaboration, please email Dmitry Zelenkovsky at dmitry.zelenkovsky@lge.com. Copyright and License Copyright (c) 2018 LG Electronics, Inc. This software contains code licensed as described in LICENSE.","title":"Getting started"},{"location":"getting-started/#a-rosros2-multi-robot-simulator-for-autonomous-vehicles","text":"","title":"A ROS/ROS2 Multi-robot Simulator for Autonomous Vehicles"},{"location":"getting-started/#introduction","text":"LG Silicon Valley Lab has developed a Unity-based multi-robot simulator for autonomous vehicle developers. We provide an out-of-the-box solution which can meet the needs of developers wishing to focus on testing their autonomous vehicle algorithms. It currently has integration with the Duckietown , TierIV's Autoware , and Baidu's Apollo platforms, can generate HD maps, and be immediately used for testing and validation of a whole system with little need for custom integrations. We hope to build a collaborative community among robotics and autonomous vehicle developers by open sourcing our efforts. To use the simulator with Apollo, after following the build steps for the simulator, follow the guide on our Apollo fork . To use the simulator with Autoware, build the simulator then follow the guide on our Autoware fork .","title":"Introduction"},{"location":"getting-started/#video","text":"( Link )","title":"Video"},{"location":"getting-started/#getting-started","text":"Running the simulator with reasonable performance and frame rate (for perception related tasks) requires a high performance desktop. Below is the recommended system for running the simulator at high quality. We are currently working on performance improvements for a better experience. Recommended system: 4 GHz Dual core CPU Nvidia GTX 1080 Windows 10 64 Bit The easiest way to get started with running the simulator is to open it as a project in Unity and run inside the Unity Editor. Otherwise, you can build the Unity project into a standalone executable. Currently, running the simulator in Windows yields better performance than running on Linux.","title":"Getting Started"},{"location":"getting-started/#steps-for-starting-simulator-in-unity-editor","text":"Install Unity 2018.2.4. Windows link: https://unity3d.com/get-unity/download/archive Linux link (2018.2.4f1): https://beta.unity3d.com/download/fe703c5165de/public_download.html Install Git LFS (this should be as simple as git lfs install ). Since this repository contains several large files, we speed up clones/uploads with Git LFS. This is a requirement for cloning our project, and without it the repository cannot be set up properly. Clone this repository from Github: git clone https://github.com/lgsvl/simulator.git Open Unity Editor by navigating to where it is installed and launching the Unity executable. Open the simulator project that was cloned in step 3 by selecting the simulator folder. Run the simulator. On the bottom left in the Project panel, Navigate to Assets- Scenes. Then double-click \"Menu\" (with the Unity icon next to it) to load the scene. At the top of the editor, click the Play button to start the simulator.","title":"Steps for starting simulator in Unity Editor"},{"location":"getting-started/#build-standalone-executable","text":"If you would prefer to not run in Unity Editor and build the standalone executable yourself, follow the instructions here .","title":"Build standalone executable"},{"location":"getting-started/#simulator-instructions","text":"After starting the simulator, you should see the main menu. Currently, only Free Roaming mode is supported. Click \"Free Roaming.\" Select the appropriate map and vehicle. For a standard setup, select \"SanFrancisco\" for map and \"XE_Rigged-apollo\" for Robot. If connecting with Autoware or Apollo, make sure simulator establishes connection with rosbridge. Click \"Run\" to begin. The program will not allow running if there is no established connection with a rosbridge. To bypass this and just test out the simulator environment, hold down the Shift button and click \"Run.\" The vehicle/robot should spawn inside the map environment that was selected. Read here for an explanation of all current keyboard shortcuts and controls. Follow the guides on our respective Autoware and Apollo repositories for instructions on running the platforms with the simulator.","title":"Simulator Instructions"},{"location":"getting-started/#guide-to-simulator-functionality","text":"Look here for a guide to currently available functionality and keyboard shortcuts for using the simulator.","title":"Guide to simulator functionality"},{"location":"getting-started/#contact","text":"Please feel free to provide feedback or ask questions by creating a Github issue. For inquiries about collaboration, please email Dmitry Zelenkovsky at dmitry.zelenkovsky@lge.com.","title":"Contact"},{"location":"getting-started/#copyright-and-license","text":"Copyright (c) 2018 LG Electronics, Inc. This software contains code licensed as described in LICENSE.","title":"Copyright and License"},{"location":"keyboard-shortcuts/","text":"Simulator Controls Key Bindings Officially supported: Esc - Exit prompt F1 - Help menu Space - Toggle User Interface - Drive vehicle/robot forward/back, turn For developer use: F5 - Save current position of vehicle F9 - Reset to last saved position of vehicle F12 - Toggle weather control panel H - Spawn/Respawn Non-Player Character (NPC) vehicles K - Remove NPC vehicles End - Toggle ignition (must be on for vehicle to move) Page Up - Shift to forward drive gear Page Down - Shift to reverse gear V - Toggle main camera view (from in front of car, from inside of car) D - Toggle depth camera and color segmentation camera view (Enable color segmentation camera checkbox needs to be enabled) S - Full size camera view Miscellaneous Left Shift - Toggle headlights Right Shift - Toggle parking brake (needs to be off for vehicle to move) Num Pad 5 - Num Pad 9 - Windshield wipers","title":"Keyboard shortcuts"},{"location":"keyboard-shortcuts/#simulator-controls","text":"","title":"Simulator Controls"},{"location":"keyboard-shortcuts/#key-bindings","text":"","title":"Key Bindings"},{"location":"keyboard-shortcuts/#officially-supported","text":"Esc - Exit prompt F1 - Help menu Space - Toggle User Interface - Drive vehicle/robot forward/back, turn","title":"Officially supported:"},{"location":"keyboard-shortcuts/#for-developer-use","text":"F5 - Save current position of vehicle F9 - Reset to last saved position of vehicle F12 - Toggle weather control panel H - Spawn/Respawn Non-Player Character (NPC) vehicles K - Remove NPC vehicles End - Toggle ignition (must be on for vehicle to move) Page Up - Shift to forward drive gear Page Down - Shift to reverse gear V - Toggle main camera view (from in front of car, from inside of car) D - Toggle depth camera and color segmentation camera view (Enable color segmentation camera checkbox needs to be enabled) S - Full size camera view","title":"For developer use:"},{"location":"keyboard-shortcuts/#miscellaneous","text":"Left Shift - Toggle headlights Right Shift - Toggle parking brake (needs to be off for vehicle to move) Num Pad 5 - Num Pad 9 - Windshield wipers","title":"Miscellaneous"}]}