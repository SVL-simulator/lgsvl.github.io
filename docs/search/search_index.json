{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is the documentation website for the LGSVL Simulator project. Visit our website here: https://www.lgsvlsimulator.com Visit our Github here: https://github.com/lgsvl/simulator Quick Start Getting Started Building from source Running with Autoware Running with Apollo Simulator controls","title":"Home"},{"location":"#home","text":"This is the documentation website for the LGSVL Simulator project. Visit our website here: https://www.lgsvlsimulator.com Visit our Github here: https://github.com/lgsvl/simulator","title":"Home"},{"location":"#quick-start","text":"Getting Started Building from source Running with Autoware Running with Apollo Simulator controls","title":"Quick Start"},{"location":"apollo-instructions/","text":"Running Apollo with LG SVL Simulator Table of Contents Getting Started Prerequisites Setup Docker Cloning the Repository Building Apollo and Rosbridge Launching Apollo Alongside the Simulator Getting Started The guide outlines the steps required to setup Apollo for use with the LG Automotive Simulator. If you have not already set up the simulator, please do so first by following the instructions here . We use our forked version of the Apollo repository, which can be found here . The software and source code in this repository are intended only for use with LG Automotive Simulator and should not be used in a real vehicle. Prerequisites Linux operating system (preferably Ubuntu 14.04 or later) Nvidia graphics card (required for Perception) Nvidia proprietary driver must be installed The current version of Apollo does not support Volta and Turing architectures (this includes Titan V and RTX 2080 GPUs). Setup Docker Apollo is designed to run out of docker containers. The image will mount this repository as a volume so the image will not need to be rebuilt each time a modification is made. Installing Docker CE To install Docker CE please refer to the official documentation . We also suggest following through with the post installation steps . Installing Nvidia Docker Before installing nvidia-docker make sure that you have an appropriate Nvidia driver installed. To test if nvidia drivers are properly installed enter nvidia-smi in a terminal. If the drivers are installed properly an output similar to the following should appear. +-----------------------------------------------------------------------------+ | NVIDIA-SMI 390.87 Driver Version: 390.87 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 108... Off | 00000000:65:00.0 On | N/A | | 0% 59C P5 22W / 250W | 1490MiB / 11175MiB | 4% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 1187 G /usr/lib/xorg/Xorg 863MiB | | 0 3816 G /usr/bin/gnome-shell 305MiB | | 0 4161 G ...-token=7171B24E50C2F2C595566F55F1E4D257 68MiB | | 0 4480 G ...quest-channel-token=3330599186510203656 147MiB | | 0 17936 G ...-token=5299D28BAAD9F3087B25687A764851BB 103MiB | +-----------------------------------------------------------------------------+ The installation steps for nvidia-docker are available at the official repo . Pulling LGSVL Docker image LGSVL maintains a docker image to be used alongside this repository. The docker image is available here . To pull the image use the following command: docker pull lgsvl/apollo Cloning the Repository This repository includes a couple of submodules for HD Maps and rosbrige. To make sure that the submodules are also cloned use the following command: git clone --recurse-submodules git@github.com:lgsvl/apollo.git Building Apollo and rosbridge Now everything should be in place to build apollo. Apollo must be built from the container. To launch the container navigate to the directory where the repository was cloned and enter: ./docker/scripts/dev_start.sh This should launch the container and mount a few volumes. It could take a few minutes to pull the latest volumes on the first run. To get into the container: ./docker/scripts/dev_into.sh Build Apollo: ./apollo.sh build_gpu (optional) to build without gpu: ./apollo.sh build Now build rosbrige: cd ros_pkgs catkin_make Launching Apollo alongside the simulator Here we only describe only a simple case of driving from point A to point B using Apollo and the simulator. To launch apollo, first launch and enter a container as described in the previous steps. To start Apollo: ./scripts/bootstrap.sh Note: you may receive errors about dreamview not being build if you do not run the script from the /apollo directory. Launch rosbridge: ./scripts/rosbridge.sh Run the LG SVL Simulator (see instructions in the simulator repository ) Select the San Francisco map and the XE-Rigged-apollo vehicle. Enable GPS, IMU, LIDAR, HD Mode, and Telephota Camera. (optional) Enable traffic. Open Apollo dreamview in a browser by navigating to: localhost:8888 Select the LG SVL 1080 vehicle and San Francisco map in the top right corner. Open the Module Controller tap (on the left bar). Enable Localization , Perception , Planning , Prediction , Routing , and Control . Navigate to the Route Editing tab. Select a destination by clicking on a lane line and clicking Submit Route . Watch the vehicle navigate to the destination. To stop the docker container run the dev_stop.sh script in apollo/docker/scripts in a new terminal (not in the docker container).","title":"Running with Apollo"},{"location":"apollo-instructions/#running-apollo-with-lg-svl-simulator","text":"","title":"Running Apollo with LG SVL Simulator"},{"location":"apollo-instructions/#table-of-contents","text":"Getting Started Prerequisites Setup Docker Cloning the Repository Building Apollo and Rosbridge Launching Apollo Alongside the Simulator","title":"Table of Contents"},{"location":"apollo-instructions/#getting-started","text":"The guide outlines the steps required to setup Apollo for use with the LG Automotive Simulator. If you have not already set up the simulator, please do so first by following the instructions here . We use our forked version of the Apollo repository, which can be found here . The software and source code in this repository are intended only for use with LG Automotive Simulator and should not be used in a real vehicle.","title":"Getting Started"},{"location":"apollo-instructions/#prerequisites","text":"Linux operating system (preferably Ubuntu 14.04 or later) Nvidia graphics card (required for Perception) Nvidia proprietary driver must be installed The current version of Apollo does not support Volta and Turing architectures (this includes Titan V and RTX 2080 GPUs).","title":"Prerequisites"},{"location":"apollo-instructions/#setup","text":"","title":"Setup"},{"location":"apollo-instructions/#docker","text":"Apollo is designed to run out of docker containers. The image will mount this repository as a volume so the image will not need to be rebuilt each time a modification is made.","title":"Docker"},{"location":"apollo-instructions/#installing-docker-ce","text":"To install Docker CE please refer to the official documentation . We also suggest following through with the post installation steps .","title":"Installing Docker CE"},{"location":"apollo-instructions/#installing-nvidia-docker","text":"Before installing nvidia-docker make sure that you have an appropriate Nvidia driver installed. To test if nvidia drivers are properly installed enter nvidia-smi in a terminal. If the drivers are installed properly an output similar to the following should appear. +-----------------------------------------------------------------------------+ | NVIDIA-SMI 390.87 Driver Version: 390.87 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 108... Off | 00000000:65:00.0 On | N/A | | 0% 59C P5 22W / 250W | 1490MiB / 11175MiB | 4% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 1187 G /usr/lib/xorg/Xorg 863MiB | | 0 3816 G /usr/bin/gnome-shell 305MiB | | 0 4161 G ...-token=7171B24E50C2F2C595566F55F1E4D257 68MiB | | 0 4480 G ...quest-channel-token=3330599186510203656 147MiB | | 0 17936 G ...-token=5299D28BAAD9F3087B25687A764851BB 103MiB | +-----------------------------------------------------------------------------+ The installation steps for nvidia-docker are available at the official repo .","title":"Installing Nvidia Docker"},{"location":"apollo-instructions/#pulling-lgsvl-docker-image","text":"LGSVL maintains a docker image to be used alongside this repository. The docker image is available here . To pull the image use the following command: docker pull lgsvl/apollo","title":"Pulling LGSVL Docker image"},{"location":"apollo-instructions/#cloning-the-repository","text":"This repository includes a couple of submodules for HD Maps and rosbrige. To make sure that the submodules are also cloned use the following command: git clone --recurse-submodules git@github.com:lgsvl/apollo.git","title":"Cloning the Repository"},{"location":"apollo-instructions/#building-apollo-and-rosbridge","text":"Now everything should be in place to build apollo. Apollo must be built from the container. To launch the container navigate to the directory where the repository was cloned and enter: ./docker/scripts/dev_start.sh This should launch the container and mount a few volumes. It could take a few minutes to pull the latest volumes on the first run. To get into the container: ./docker/scripts/dev_into.sh Build Apollo: ./apollo.sh build_gpu (optional) to build without gpu: ./apollo.sh build Now build rosbrige: cd ros_pkgs catkin_make","title":"Building Apollo and rosbridge"},{"location":"apollo-instructions/#launching-apollo-alongside-the-simulator","text":"Here we only describe only a simple case of driving from point A to point B using Apollo and the simulator. To launch apollo, first launch and enter a container as described in the previous steps. To start Apollo: ./scripts/bootstrap.sh Note: you may receive errors about dreamview not being build if you do not run the script from the /apollo directory. Launch rosbridge: ./scripts/rosbridge.sh Run the LG SVL Simulator (see instructions in the simulator repository ) Select the San Francisco map and the XE-Rigged-apollo vehicle. Enable GPS, IMU, LIDAR, HD Mode, and Telephota Camera. (optional) Enable traffic. Open Apollo dreamview in a browser by navigating to: localhost:8888 Select the LG SVL 1080 vehicle and San Francisco map in the top right corner. Open the Module Controller tap (on the left bar). Enable Localization , Perception , Planning , Prediction , Routing , and Control . Navigate to the Route Editing tab. Select a destination by clicking on a lane line and clicking Submit Route . Watch the vehicle navigate to the destination. To stop the docker container run the dev_stop.sh script in apollo/docker/scripts in a new terminal (not in the docker container).","title":"Launching Apollo alongside the simulator"},{"location":"autoware-instructions/","text":"Autoware with LG SVL Simulator Table of Contents General Setup Requirements Docker image setup Simulator Installation Launching Autoware alongside Simulator Copyright and License General This guide goes through how to run Autoware with the LG SVL Simulator. This link leads to our fork of the ROS-based open-source software Autoware. The repository contains various fixes and changes on top of Autoware to allow running it with LG Silicon Valley Lab's Autonomous Driving Simulator. This fork of Autoware is currently rebased on Autoware release 1.9.0. In order to run Autoware with the LGSVL simulator, it is easiest to build and run a custom Docker image. It will also be necessary to clone LGSVL's autoware-data repository, which contains the HD maps, point cloud maps, and launch scripts needed to run Autoware in the simulator's default San Francisco environment. Autoware communicates with the simulator using the rosbridge_suite, which provides JSON interfacing with ROS publishers/subscribers. Setup Requirements Linux operating system Nvidia graphics card Docker image setup We recommend using a Docker container to run Autoware. We do not currently provide an image on Docker Hub, so it is necessary to build the Docker image first manually. Installing Docker CE To install Docker CE please refer to the official documentation . We also suggest following through with the post installation steps . Installing Nvidia Docker Before installing nvidia-docker make sure that you have an appropriate Nvidia driver installed. To test if nvidia drivers are properly installed enter nvidia-smi in a terminal. If the drivers are installed properly an output similar to the following should appear. +-----------------------------------------------------------------------------+ | NVIDIA-SMI 390.87 Driver Version: 390.87 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 108... Off | 00000000:65:00.0 On | N/A | | 0% 59C P5 22W / 250W | 1490MiB / 11175MiB | 4% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 1187 G /usr/lib/xorg/Xorg 863MiB | | 0 3816 G /usr/bin/gnome-shell 305MiB | | 0 4161 G ...-token=7171B24E50C2F2C595566F55F1E4D257 68MiB | | 0 4480 G ...quest-channel-token=3330599186510203656 147MiB | | 0 17936 G ...-token=5299D28BAAD9F3087B25687A764851BB 103MiB | +-----------------------------------------------------------------------------+ The installation steps for nvidia-docker are available at the official repo . Building LGSVL Autoware Docker image Cloning requires instaling Git LFS. If you do not already have Git LFS installed, follow these instructions . Clone this repository to your home directory, making sure to checkout the lgsvl_develop branch: $ git clone --recurse-submodules git@github.com:lgsvl/autoware.git -b lgsvl_develop Build the Docker image. This should take some time. $ cd autoware/docker/generic $ ./build.sh kinetic You should now have a Docker image named autoware-kinetic . We also need LGSVL's autoware-data repository, which contains map files and launch scripts for running with the simulator. This repository also uses Git LFS. Clone the autoware-data repository: $ mkdir ~/shared_dir cd ~/shared_dir $ git clone git@github.com:lgsvl/autoware-data.git You are now ready to bring up a Docker container and run Autoware. Launch the container: $ cd ~/autoware/docker/generic $ ./run.sh kinetic You should now be logged into the container under the username autoware . Simulator installation Follow the instructions on our simulator Github page here . Launching Autoware alongside LG SVL Simulator To launch Autoware, first bring up the Docker container as described in the previous section. Inside the container, run Autoware: autoware@[MY_DESKTOP]:~$ cd ~/autoware/ros autoware@[MY_DESKTOP]:~$ ./run A few terminals will open, as well as a GUI for the runtime manager. In the runtime manager, click on the 'Quick Start' tab and load the following launch files from ~/shared_dir/autoware-data/my_launch_sf_map/ by clicking \"Ref\" to the right of each text box: my_map.launch my_sensing_simulator.launch my_localization.launch my_detection.launch my_mission_planning.launch my_motion_planning.launch Click \"Map\" to load the launch file pertaining to the HD maps. An \"Ok\" should appear to the right of the \"Ref\" button when successfully loaded. Then click \"Sensing\" which brings up rosbridge. Run the LG SVL simulator, choosing \"SanFrancisco\" map and \"XE_Rigged-autoware\" for Robot. After \"my_sensing_simulator.launch\" has been loaded, the simulator should show \"Connected\", showing that the simulator has established a connection with the rosbridge server. Click \"Run\" to start, and a vehicle should appear in the streets of San Francisco. On the left, click the check boxes for \"Enable GPS\" and \"Enable LIDAR\". In the Autoware Runtime Manager, continue loading the other launch files - click \"Localization\" and wait for the time to display to the right of \"Ref\". Then click \"Detection,\" \"Mission Planning\", then \"Motion Planning\". Then click \"Rviz\" to launch Rviz - the vector map and location of the vehicle in the map should show. To see the vehicle drive, click \"2D Nav Goal\" in Rviz, then click a destination point and drag slightly in a feasible direction (in the direction of the driving lane) to give a goal destination pose to the planner. The vehicle should plan a path and begin driving towards the destination. You should see something similar in RViz to the above when the vehicle successfully starts navigating using Autoware. Copyright and License This software contains code licensed as described in LICENSE.","title":"Running with Autoware"},{"location":"autoware-instructions/#autoware-with-lg-svl-simulator","text":"","title":"Autoware with LG SVL Simulator"},{"location":"autoware-instructions/#table-of-contents","text":"General Setup Requirements Docker image setup Simulator Installation Launching Autoware alongside Simulator Copyright and License","title":"Table of Contents"},{"location":"autoware-instructions/#general","text":"This guide goes through how to run Autoware with the LG SVL Simulator. This link leads to our fork of the ROS-based open-source software Autoware. The repository contains various fixes and changes on top of Autoware to allow running it with LG Silicon Valley Lab's Autonomous Driving Simulator. This fork of Autoware is currently rebased on Autoware release 1.9.0. In order to run Autoware with the LGSVL simulator, it is easiest to build and run a custom Docker image. It will also be necessary to clone LGSVL's autoware-data repository, which contains the HD maps, point cloud maps, and launch scripts needed to run Autoware in the simulator's default San Francisco environment. Autoware communicates with the simulator using the rosbridge_suite, which provides JSON interfacing with ROS publishers/subscribers.","title":"General"},{"location":"autoware-instructions/#setup","text":"","title":"Setup"},{"location":"autoware-instructions/#requirements","text":"Linux operating system Nvidia graphics card","title":"Requirements"},{"location":"autoware-instructions/#docker-image-setup","text":"We recommend using a Docker container to run Autoware. We do not currently provide an image on Docker Hub, so it is necessary to build the Docker image first manually.","title":"Docker image setup"},{"location":"autoware-instructions/#installing-docker-ce","text":"To install Docker CE please refer to the official documentation . We also suggest following through with the post installation steps .","title":"Installing Docker CE"},{"location":"autoware-instructions/#installing-nvidia-docker","text":"Before installing nvidia-docker make sure that you have an appropriate Nvidia driver installed. To test if nvidia drivers are properly installed enter nvidia-smi in a terminal. If the drivers are installed properly an output similar to the following should appear. +-----------------------------------------------------------------------------+ | NVIDIA-SMI 390.87 Driver Version: 390.87 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 108... Off | 00000000:65:00.0 On | N/A | | 0% 59C P5 22W / 250W | 1490MiB / 11175MiB | 4% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | 0 1187 G /usr/lib/xorg/Xorg 863MiB | | 0 3816 G /usr/bin/gnome-shell 305MiB | | 0 4161 G ...-token=7171B24E50C2F2C595566F55F1E4D257 68MiB | | 0 4480 G ...quest-channel-token=3330599186510203656 147MiB | | 0 17936 G ...-token=5299D28BAAD9F3087B25687A764851BB 103MiB | +-----------------------------------------------------------------------------+ The installation steps for nvidia-docker are available at the official repo .","title":"Installing Nvidia Docker"},{"location":"autoware-instructions/#building-lgsvl-autoware-docker-image","text":"Cloning requires instaling Git LFS. If you do not already have Git LFS installed, follow these instructions . Clone this repository to your home directory, making sure to checkout the lgsvl_develop branch: $ git clone --recurse-submodules git@github.com:lgsvl/autoware.git -b lgsvl_develop Build the Docker image. This should take some time. $ cd autoware/docker/generic $ ./build.sh kinetic You should now have a Docker image named autoware-kinetic . We also need LGSVL's autoware-data repository, which contains map files and launch scripts for running with the simulator. This repository also uses Git LFS. Clone the autoware-data repository: $ mkdir ~/shared_dir cd ~/shared_dir $ git clone git@github.com:lgsvl/autoware-data.git You are now ready to bring up a Docker container and run Autoware. Launch the container: $ cd ~/autoware/docker/generic $ ./run.sh kinetic You should now be logged into the container under the username autoware .","title":"Building LGSVL Autoware Docker image"},{"location":"autoware-instructions/#simulator-installation","text":"Follow the instructions on our simulator Github page here .","title":"Simulator installation"},{"location":"autoware-instructions/#launching-autoware-alongside-lg-svl-simulator","text":"To launch Autoware, first bring up the Docker container as described in the previous section. Inside the container, run Autoware: autoware@[MY_DESKTOP]:~$ cd ~/autoware/ros autoware@[MY_DESKTOP]:~$ ./run A few terminals will open, as well as a GUI for the runtime manager. In the runtime manager, click on the 'Quick Start' tab and load the following launch files from ~/shared_dir/autoware-data/my_launch_sf_map/ by clicking \"Ref\" to the right of each text box: my_map.launch my_sensing_simulator.launch my_localization.launch my_detection.launch my_mission_planning.launch my_motion_planning.launch Click \"Map\" to load the launch file pertaining to the HD maps. An \"Ok\" should appear to the right of the \"Ref\" button when successfully loaded. Then click \"Sensing\" which brings up rosbridge. Run the LG SVL simulator, choosing \"SanFrancisco\" map and \"XE_Rigged-autoware\" for Robot. After \"my_sensing_simulator.launch\" has been loaded, the simulator should show \"Connected\", showing that the simulator has established a connection with the rosbridge server. Click \"Run\" to start, and a vehicle should appear in the streets of San Francisco. On the left, click the check boxes for \"Enable GPS\" and \"Enable LIDAR\". In the Autoware Runtime Manager, continue loading the other launch files - click \"Localization\" and wait for the time to display to the right of \"Ref\". Then click \"Detection,\" \"Mission Planning\", then \"Motion Planning\". Then click \"Rviz\" to launch Rviz - the vector map and location of the vehicle in the map should show. To see the vehicle drive, click \"2D Nav Goal\" in Rviz, then click a destination point and drag slightly in a feasible direction (in the direction of the driving lane) to give a goal destination pose to the planner. The vehicle should plan a path and begin driving towards the destination. You should see something similar in RViz to the above when the vehicle successfully starts navigating using Autoware.","title":"Launching Autoware alongside LG SVL Simulator"},{"location":"autoware-instructions/#copyright-and-license","text":"This software contains code licensed as described in LICENSE.","title":"Copyright and License"},{"location":"build-instructions/","text":"Instructions to build standalone executable Build steps for Ubuntu host: Install Unity 2018.2.4f1: https://beta.unity3d.com/download/fe703c5165de/public_download.html install into the /opt/Unity folder: chmod +x ~/Downloads/UnitySetup-2018.2.4f1 ./UnitySetup-2018.2.4f1 --unattended --install-location=/opt/Unity --components=Unity,Windows-Mono run Unity and make sure it's activated Make sure you have git-lfs installed before cloning this repository . Clone simulator from GitHub: git clone https://github.com/lgsvl/simulator.git Run build: mkdir build /opt/Unity/Editor/Unity \\ -batchmode \\ -nographics \\ -silent-crashes \\ -quit \\ -buildDestination ./build/simulator \\ -buildTarget Linux64 \\ -executeMethod BuildScript.Build \\ -projectPath . \\ -logFile /dev/stdout Test simulator: Run rosbridge: roslaunch rosbridge_server rosbridge_websocket.launch Run simulator from build/simulator Choose \"Free Roaming\" - \"DuckieDowntown\" as map - \"Duckiebot-duckietown-ros1\" as robot make sure it's connected, click \"RUN\" - make sure it's running, you can operate the robot Run rviz or rqt_image_view and see image from topic \"/simulator/camera_node/image/compressed\"","title":"Build instructions"},{"location":"build-instructions/#instructions-to-build-standalone-executable","text":"Build steps for Ubuntu host: Install Unity 2018.2.4f1: https://beta.unity3d.com/download/fe703c5165de/public_download.html install into the /opt/Unity folder: chmod +x ~/Downloads/UnitySetup-2018.2.4f1 ./UnitySetup-2018.2.4f1 --unattended --install-location=/opt/Unity --components=Unity,Windows-Mono run Unity and make sure it's activated Make sure you have git-lfs installed before cloning this repository . Clone simulator from GitHub: git clone https://github.com/lgsvl/simulator.git Run build: mkdir build /opt/Unity/Editor/Unity \\ -batchmode \\ -nographics \\ -silent-crashes \\ -quit \\ -buildDestination ./build/simulator \\ -buildTarget Linux64 \\ -executeMethod BuildScript.Build \\ -projectPath . \\ -logFile /dev/stdout Test simulator: Run rosbridge: roslaunch rosbridge_server rosbridge_websocket.launch Run simulator from build/simulator Choose \"Free Roaming\" - \"DuckieDowntown\" as map - \"Duckiebot-duckietown-ros1\" as robot make sure it's connected, click \"RUN\" - make sure it's running, you can operate the robot Run rviz or rqt_image_view and see image from topic \"/simulator/camera_node/image/compressed\"","title":"Instructions to build standalone executable"},{"location":"getting-started/","text":"A ROS/ROS2 Multi-robot Simulator for Autonomous Vehicles Introduction Please visit our new website at https://www.lgsvlsimulator.com LG Silicon Valley Lab has developed a Unity-based multi-robot simulator for autonomous vehicle developers. We provide an out-of-the-box solution which can meet the needs of developers wishing to focus on testing their autonomous vehicle algorithms. It currently has integration with the Duckietown , TierIV's Autoware , and Baidu's Apollo platforms, can generate HD maps, and be immediately used for testing and validation of a whole system with little need for custom integrations. We hope to build a collaborative community among robotics and autonomous vehicle developers by open sourcing our efforts. To use the simulator with Apollo, after following the build steps for the simulator, follow the guide on our Apollo fork . To use the simulator with Autoware, build the simulator then follow the guide on our Autoware fork . Video ( Link ) Getting Started Running the simulator with reasonable performance and frame rate (for perception related tasks) requires a high performance desktop. Below is the recommended system for running the simulator at high quality. We are currently working on performance improvements for a better experience. Recommended system: 4 GHz Dual core CPU Nvidia GTX 1080 Windows 10 64 Bit The easiest way to get started with running the simulator is to open it as a project in Unity and run inside the Unity Editor. Otherwise, you can build the Unity project into a standalone executable. Currently, running the simulator in Windows yields better performance than running on Linux. Steps for starting simulator in Unity Editor Install Unity 2018.2.4. Windows link: https://unity3d.com/get-unity/download/archive Linux link (2018.2.4f1): https://beta.unity3d.com/download/fe703c5165de/public_download.html Install Git LFS (this should be as simple as git lfs install ). Since this repository contains several large files, we speed up clones/uploads with Git LFS. This is a requirement for cloning our project, and without it the repository cannot be set up properly. Clone this repository from Github: git clone https://github.com/lgsvl/simulator.git Open Unity Editor by navigating to where it is installed and launching the Unity executable. Open the simulator project that was cloned in step 3 by selecting the simulator folder. Run the simulator. On the bottom left in the Project panel, Navigate to Assets- Scenes. Then double-click \"Menu\" (with the Unity icon next to it) to load the scene. At the top of the editor, click the Play button to start the simulator. Build standalone executable If you would prefer to not run in Unity Editor and build the standalone executable yourself, follow the instructions here . Simulator Instructions After starting the simulator, you should see the main menu. Currently, only Free Roaming mode is supported. Click \"Free Roaming.\" Select the appropriate map and vehicle. For a standard setup, select \"SanFrancisco\" for map and \"XE_Rigged-apollo\" for Robot. If connecting with Autoware or Apollo, make sure simulator establishes connection with rosbridge. Click \"Run\" to begin. The program will not allow running if there is no established connection with a rosbridge. To bypass this and just test out the simulator environment, hold down the Shift button and click \"Run.\" The vehicle/robot should spawn inside the map environment that was selected. Read here for an explanation of all current keyboard shortcuts and controls. Follow the guides on our respective Autoware and Apollo repositories for instructions on running the platforms with the simulator. Guide to simulator functionality Look here for a guide to currently available functionality and keyboard shortcuts for using the simulator. Contact Please feel free to provide feedback or ask questions by creating a Github issue. For inquiries about collaboration, please email Dmitry Zelenkovsky at dmitry.zelenkovsky@lge.com. Copyright and License Copyright (c) 2018 LG Electronics, Inc. This software contains code licensed as described in LICENSE.","title":"Getting started"},{"location":"getting-started/#a-rosros2-multi-robot-simulator-for-autonomous-vehicles","text":"","title":"A ROS/ROS2 Multi-robot Simulator for Autonomous Vehicles"},{"location":"getting-started/#introduction","text":"Please visit our new website at https://www.lgsvlsimulator.com LG Silicon Valley Lab has developed a Unity-based multi-robot simulator for autonomous vehicle developers. We provide an out-of-the-box solution which can meet the needs of developers wishing to focus on testing their autonomous vehicle algorithms. It currently has integration with the Duckietown , TierIV's Autoware , and Baidu's Apollo platforms, can generate HD maps, and be immediately used for testing and validation of a whole system with little need for custom integrations. We hope to build a collaborative community among robotics and autonomous vehicle developers by open sourcing our efforts. To use the simulator with Apollo, after following the build steps for the simulator, follow the guide on our Apollo fork . To use the simulator with Autoware, build the simulator then follow the guide on our Autoware fork .","title":"Introduction"},{"location":"getting-started/#video","text":"( Link )","title":"Video"},{"location":"getting-started/#getting-started","text":"Running the simulator with reasonable performance and frame rate (for perception related tasks) requires a high performance desktop. Below is the recommended system for running the simulator at high quality. We are currently working on performance improvements for a better experience. Recommended system: 4 GHz Dual core CPU Nvidia GTX 1080 Windows 10 64 Bit The easiest way to get started with running the simulator is to open it as a project in Unity and run inside the Unity Editor. Otherwise, you can build the Unity project into a standalone executable. Currently, running the simulator in Windows yields better performance than running on Linux.","title":"Getting Started"},{"location":"getting-started/#steps-for-starting-simulator-in-unity-editor","text":"Install Unity 2018.2.4. Windows link: https://unity3d.com/get-unity/download/archive Linux link (2018.2.4f1): https://beta.unity3d.com/download/fe703c5165de/public_download.html Install Git LFS (this should be as simple as git lfs install ). Since this repository contains several large files, we speed up clones/uploads with Git LFS. This is a requirement for cloning our project, and without it the repository cannot be set up properly. Clone this repository from Github: git clone https://github.com/lgsvl/simulator.git Open Unity Editor by navigating to where it is installed and launching the Unity executable. Open the simulator project that was cloned in step 3 by selecting the simulator folder. Run the simulator. On the bottom left in the Project panel, Navigate to Assets- Scenes. Then double-click \"Menu\" (with the Unity icon next to it) to load the scene. At the top of the editor, click the Play button to start the simulator.","title":"Steps for starting simulator in Unity Editor"},{"location":"getting-started/#build-standalone-executable","text":"If you would prefer to not run in Unity Editor and build the standalone executable yourself, follow the instructions here .","title":"Build standalone executable"},{"location":"getting-started/#simulator-instructions","text":"After starting the simulator, you should see the main menu. Currently, only Free Roaming mode is supported. Click \"Free Roaming.\" Select the appropriate map and vehicle. For a standard setup, select \"SanFrancisco\" for map and \"XE_Rigged-apollo\" for Robot. If connecting with Autoware or Apollo, make sure simulator establishes connection with rosbridge. Click \"Run\" to begin. The program will not allow running if there is no established connection with a rosbridge. To bypass this and just test out the simulator environment, hold down the Shift button and click \"Run.\" The vehicle/robot should spawn inside the map environment that was selected. Read here for an explanation of all current keyboard shortcuts and controls. Follow the guides on our respective Autoware and Apollo repositories for instructions on running the platforms with the simulator.","title":"Simulator Instructions"},{"location":"getting-started/#guide-to-simulator-functionality","text":"Look here for a guide to currently available functionality and keyboard shortcuts for using the simulator.","title":"Guide to simulator functionality"},{"location":"getting-started/#contact","text":"Please feel free to provide feedback or ask questions by creating a Github issue. For inquiries about collaboration, please email Dmitry Zelenkovsky at dmitry.zelenkovsky@lge.com.","title":"Contact"},{"location":"getting-started/#copyright-and-license","text":"Copyright (c) 2018 LG Electronics, Inc. This software contains code licensed as described in LICENSE.","title":"Copyright and License"},{"location":"keyboard-shortcuts/","text":"Simulator Controls Key Bindings Officially supported: Esc - Exit prompt F1 - Help menu Space - Toggle User Interface - Drive vehicle/robot forward/back, turn For developer use: F5 - Save current position of vehicle F9 - Reset to last saved position of vehicle F12 - Toggle weather control panel H - Spawn/Respawn Non-Player Character (NPC) vehicles K - Remove NPC vehicles End - Toggle ignition (must be on for vehicle to move) Page Up - Shift to forward drive gear Page Down - Shift to reverse gear V - Toggle main camera view (from in front of car, from inside of car) Miscellaneous Left Shift - Toggle headlights Right Shift - Toggle parking brake (needs to be off for vehicle to move) Num Pad 5 - Num Pad 9 - Windshield wipers Steering Wheel Controls (Demonstration) We use the Logitech G920 steering wheel with our simulator. The following table shows key mappings on the wheel for demonstration purposes, mainly for developer use. Logitech Wheel Button Keyboard equivalent Effect Right paddle Up Accelerate Left paddle Down Brake RSB Page Up/ Page Down Toggle between Drive and Reverse LSB Num 5-8 Toggle windshield wipers on/off A Spacebar Toggle UI Switch (sensor menu camera display) B H Respawn all NPC traffic (not toggle) X - Toggle sensor effects (LiDAR) Y V Cycle through camera views D-pad Up - Daytime scenario (no rain or fog) D-pad Down - Rainy scenario (with fog) D-pad Left - Night scenario (rain + fog + road wetness) D-pad Right - Sunrise foggy scenario Overlapping Squares Left Shift Cycle through headlight settings (off-low-high) Hamburger Menu (3 horizontal lines) Right Shift Toggle parking brake Xbox End Toggle vehicle ignition","title":"Keyboard shortcuts"},{"location":"keyboard-shortcuts/#simulator-controls","text":"","title":"Simulator Controls"},{"location":"keyboard-shortcuts/#key-bindings","text":"","title":"Key Bindings"},{"location":"keyboard-shortcuts/#officially-supported","text":"Esc - Exit prompt F1 - Help menu Space - Toggle User Interface - Drive vehicle/robot forward/back, turn","title":"Officially supported:"},{"location":"keyboard-shortcuts/#for-developer-use","text":"F5 - Save current position of vehicle F9 - Reset to last saved position of vehicle F12 - Toggle weather control panel H - Spawn/Respawn Non-Player Character (NPC) vehicles K - Remove NPC vehicles End - Toggle ignition (must be on for vehicle to move) Page Up - Shift to forward drive gear Page Down - Shift to reverse gear V - Toggle main camera view (from in front of car, from inside of car)","title":"For developer use:"},{"location":"keyboard-shortcuts/#miscellaneous","text":"Left Shift - Toggle headlights Right Shift - Toggle parking brake (needs to be off for vehicle to move) Num Pad 5 - Num Pad 9 - Windshield wipers","title":"Miscellaneous"},{"location":"keyboard-shortcuts/#steering-wheel-controls-demonstration","text":"We use the Logitech G920 steering wheel with our simulator. The following table shows key mappings on the wheel for demonstration purposes, mainly for developer use. Logitech Wheel Button Keyboard equivalent Effect Right paddle Up Accelerate Left paddle Down Brake RSB Page Up/ Page Down Toggle between Drive and Reverse LSB Num 5-8 Toggle windshield wipers on/off A Spacebar Toggle UI Switch (sensor menu camera display) B H Respawn all NPC traffic (not toggle) X - Toggle sensor effects (LiDAR) Y V Cycle through camera views D-pad Up - Daytime scenario (no rain or fog) D-pad Down - Rainy scenario (with fog) D-pad Left - Night scenario (rain + fog + road wetness) D-pad Right - Sunrise foggy scenario Overlapping Squares Left Shift Cycle through headlight settings (off-low-high) Hamburger Menu (3 horizontal lines) Right Shift Toggle parking brake Xbox End Toggle vehicle ignition","title":"Steering Wheel Controls (Demonstration)"}]}